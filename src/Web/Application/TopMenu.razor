@inject HttpClient _http
@inject AuthStateProvider _authState
@inject NavigationManager _navigation

<nav class="navbar navbar-expand-lg sticky-top bg-light" data-bs-theme="light">
    <div class="container-fluid">
        <div class="navbar-brand dropdown">
            <span class="dropdown-toggle" id="navbarDropdown" data-bs-toggle="dropdown">BSLR</span>
            <ul class="dropdown-menu" aria-labelledby="navbarDropdown">
                <AuthorizeView>
                    <Authorized>
                        <li class="dropdown-item" @onclick="() => _navigation.NavigateTo(Routes.Profile, false)">Profile</li>
                        <li><hr class="dropdown-divider"></li>
                        <li class="dropdown-item" @onclick="Logout">Logout</li>
                    </Authorized>
                    <NotAuthorized>
                        <li class="dropdown-item" @onclick="() => _navigation.NavigateTo(Routes.Login, false)">Login</li>
                    </NotAuthorized>
                </AuthorizeView>
            </ul>
        </div>
        <div class="navbar-collapse @GetCollapsedCssClass(_isNavMenuCollapsed)" @onclick="ToggleNavMenu">
            <ul class="navbar-nav me-auto">
                <li class="nav-item">
                    <NavLink class="nav-link" href="@Routes.Home" Match="NavLinkMatch.All">Home</NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="fetchdata">Weather</NavLink>
                </li>
            </ul>
        </div>
        <button class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</nav>

@code {
    private bool _isNavMenuCollapsed = true;

    private void ToggleNavMenu() => _isNavMenuCollapsed = !_isNavMenuCollapsed;
    private string? GetCollapsedCssClass(bool isCollapsed) => isCollapsed ? "collapse" : null;
    private async Task Logout()
    {
        _ = await _http.PostAsync(Endpoints.Accounts.Logout, null);
        _navigation.NavigateTo(Routes.Login);
        _authState.NotifyUserAuthentication();
    }
}
