@attribute [Route(Routes.Login)]
@inject HttpClient _http
@inject AuthStateProvider _authStateProvider
@inject NavigationManager _navigation

<PageTitle>BSLR: Login</PageTitle>

<div class="mask d-flex align-items-center">
    <div class="container h-100">
        <div class="row d-flex justify-content-center align-items-center h-100">
            <div class="col-12 col-md-9 col-lg-7 col-xl-6">
                <div class="card" style="border-radius: 15px;">
                    <div class="card-body p-5">

                        <EditForm EditContext="_context" OnValidSubmit="Submit" FormName="AccountRegistration">
                            <DataAnnotationsValidator />

                            <h2 class="text-uppercase text-center mb-5">Account Login</h2>
                            
                            <div class="form-outline mb-4">
                                <label class="form-label" for="Input_Email">Email</label>
                                <InputText tabindex="1" type="email" id="Input_Email" class="form-control form-control-lg" @ref="_emailInput" @bind-Value="_model.Email" />
                                <ValidationMessage For="@(() => _model.Email)" />
                            </div>

                            <div class="form-outline mb-4">
                                <label class="form-label" for="Input_Password">Password</label>
                                <InputText tabindex="2" type="password" id="Input_Password" class="form-control form-control-lg" @bind-Value="_model.Password" />
                                <ValidationMessage For="@(() => _model.Password)" />
                            </div>

                            @if(_isProcessing)
                            {
                                <div class="d-flex justify-content-center">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="d-flex justify-content-center">
                                    <button tabindex="4" type="reset" class="btn btn-outline-primary btn-block btn-lg me-2" @onclick="Reset">Reset</button>
                                    <button tabindex="3" type="submit" class="btn btn-primary btn-block btn-lg text-body ms-2">Login</button>
                                </div>
                            }                            

                            <p class="text-center text-muted mt-5 mb-0">Don't have an account? <a href="@Routes.Register" class="link fw-bold"><u>Create new account</u></a></p>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private FormModel _model { get; set; } = new();
    private EditContext? _context;
    private InputText _emailInput = default!;

    private bool _isProcessing = false;

    private class FormModel
    {
        [Required(ErrorMessage = "Email is required!")]
        public string? Email { get; set; }

        [Required(ErrorMessage = "Password is required!")]
        public string? Password { get; set; }
    }

    protected override void OnInitialized() => _context = new(_model);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _emailInput?.Element is not null)
            await _emailInput.Element.Value.FocusAsync();
    }

    private void Reset()
    {
        _model = new FormModel();
        _context = new(_model);
    }

    private async Task Submit()
    {
        _isProcessing = true;

        try
        {
            var request = new LoginAccountRequest(_model.Email!, _model.Password!);
            _model.Password = null;

            var response = await _http.PostAsJsonAsync(Endpoints.Accounts.Login, request);
            if (response.IsSuccessStatusCode is not true)
            {
                Log.Error("Login failed: {@Response}", response.Content);
                return;
            }

            var tokenData = await response.Content.ReadFromJsonAsync<AccessTokenResponse>();
            if (tokenData?.AccessToken is null)
            {
                Log.Error("Login failed: {@Response}", response.Content);
                return;
            }

            _authStateProvider.NotifyUserAuthentication(tokenData.AccessToken, tokenData.ExpiresOn);
            _navigation.NavigateTo("/");
        }
        finally
        {
            _isProcessing = false;
        }
    }
}
